using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace NSL.Extensions.RPC.Generator
{
    internal class ClassDeclarationSyntaxComparer : EqualityComparer<ClassDeclarationSyntax>
    {
        public override bool Equals(ClassDeclarationSyntax x, ClassDeclarationSyntax y)
        {
            return x.Identifier.Text.Equals(y.Identifier.Text);
        }

        public override int GetHashCode(ClassDeclarationSyntax obj)
        {
            return obj.GetHashCode();
        }
    }
    internal class ClassDeclComparer : EqualityComparer<ClassDecl>
    {
        public override bool Equals(ClassDecl x, ClassDecl y)
        {
            return x.Class.Identifier.Text.Equals(y.Class.Identifier.Text);
        }

        public override int GetHashCode(ClassDecl obj)
        {
            return obj.Class.GetHashCode();
        }
    }
    internal class MethodDeclarationSyntaxComparer : EqualityComparer<MethodDeclarationSyntax>
    {
        public override bool Equals(MethodDeclarationSyntax x, MethodDeclarationSyntax y)
        {
            return x.Identifier.Text.Equals(y.Identifier.Text);
        }

        public override int GetHashCode(MethodDeclarationSyntax obj)
        {
            return obj.GetHashCode();
        }
    }

    [Generator]
    internal class RPCGenerator : ISourceGenerator
    {
        internal static ClassDeclarationSyntaxComparer classDeclarationSyntaxComparer = new ClassDeclarationSyntaxComparer();
        internal static ClassDeclComparer classDeclComparer = new ClassDeclComparer();
        internal static MethodDeclarationSyntaxComparer methodDeclarationSyntaxComparer = new MethodDeclarationSyntaxComparer();

        internal static string GetClassFullModifier(ClassDeclarationSyntax classDecl)
            => string.Join(" ", classDecl.Modifiers.Select(x => x.Text));

        internal static string GetClassName(ClassDeclarationSyntax classDecl)
            => @classDecl.Identifier.Text;

        internal static string GetClassRPCHandleName(ClassDeclarationSyntax classDecl)
            => $"{GetClassName(classDecl)}RPCRepository";

        internal static string GetMethodName(MethodDeclarationSyntax methodDecl)
            => methodDecl.Identifier.Text;

        internal static string GetMethodRPCHandleName(MethodDeclarationSyntax methodDecl)
            => GetMethodRPCHandleName(GetMethodName(methodDecl));

        internal static string GetMethodRPCHandleName(string methodName)
            => $"{methodName}RecvHandle";

        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxReceiver is RPCMethodAttributeSyntaxReceiver<RPCMethodAttribute> syntaxReceiver))
            {
                return;
            }

            var data = syntaxReceiver.Methods
                .Select(x => new
                {
                    Class = (ClassDeclarationSyntax)x.Parent,
                    Method = x
                })
                .GroupBy(x => new ClassDecl { Class = x.Class, Context = context }, classDeclComparer)

                .Select(item =>
                {
                    item.Key.Methods = item.GroupBy(b => b.Method, methodDeclarationSyntaxComparer)
                            .Select(j => new MethodDecl()
                            {
                                Class = item.Key,
                                Name = j.Key.Identifier.Text,
                                Overrides = j.Select(t => t.Method)
                            });

                    return item.Key;
                })
                .ToArray();

            //if (!Debugger.IsAttached)
            //    Debugger.Launch();

            foreach (var classDecl in data)
            {
                var ns = classDecl.Class.Parent as NamespaceDeclarationSyntax;

                var classIdentityName = GetClassName(classDecl.Class);

                CodeBuilder classBuilder = new CodeBuilder();

                classBuilder.AppendLine("/*");

                classBuilder.AppendLine($"Auto Generated by NSL RPC. Please dont change this file");
                classBuilder.AppendLine($"Project must have reference \"NSL.SocketCore\" library for normal working");
                classBuilder.AppendLine($"Project must have reference \"NSL.Extensions.RPC\" library for normal working");

                classBuilder.AppendLine("*/");

                classBuilder.AppendLine($"using NSL.SocketCore;");
                classBuilder.AppendLine($"using NSL.SocketCore.Utils.Buffer;");
                classBuilder.AppendLine($"using NSL.Extensions.RPC;");

                classBuilder.AppendLine();


                classBuilder.AppendLine($"{GetClassFullModifier(classDecl.Class)} class {GetClassRPCHandleName(classDecl.Class)} : {classIdentityName}");
                classBuilder.AppendLine("{");

                List<string> methodIdentifiers = new List<string>();

                classBuilder.NextTab();
                foreach (var method in classDecl.Methods)
                {
                    classBuilder.AppendLine(ReadMethodsGenerator.BuildMethod(method));
                }

                classBuilder.AppendLine();

                classBuilder.AppendLine(ReadMethodsGenerator.BuildNameHandle(classDecl.Methods));

                classBuilder.PrevTab();

                classBuilder.AppendLine("}");

                string outputValue = classBuilder.ToString();

                if (ns != null)
                {
                    var nsBuilder = new CodeBuilder();

                    nsBuilder.AppendLine($"namespace {ns.Name.ToString()}");
                    nsBuilder.AppendLine("{");

                    nsBuilder.NextTab();

                    nsBuilder.AppendLine(outputValue);

                    nsBuilder.PrevTab();

                    nsBuilder.AppendLine("}");

                    outputValue = nsBuilder.ToString();
                }
                File.WriteAllText($@"D:\Temp\gen\{classIdentityName}.rpcgen.cs", outputValue);

                context.AddSource($"{classIdentityName}.rpcgen.cs", outputValue);
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() =>
                new RPCMethodAttributeSyntaxReceiver<RPCMethodAttribute>());
        }

    }
}
